import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.VariableDeclarator;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import java.io.File;
import java.io.FileNotFoundException;

public class JavaParserExample {
    public static void main(String[] args) {
        File javaFile = new File("YourJavaFile.java");
        String targetVariableName = "yourVariableName"; // Specify the variable name you want to find

        try {
            CompilationUnit cu = StaticJavaParser.parse(javaFile);

            // Create a custom visitor to find the variable declaration
            VariableDeclarationVisitor declarationVisitor = new VariableDeclarationVisitor(targetVariableName);
            declarationVisitor.visit(cu, null);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    // Custom visitor to find a specific variable declaration by name
    private static class VariableDeclarationVisitor extends VoidVisitorAdapter<Void> {
        private String targetVariableName;

        public VariableDeclarationVisitor(String targetVariableName) {
            this.targetVariableName = targetVariableName;
        }

        @Override
        public void visit(VariableDeclarator declarator, Void arg) {
            super.visit(declarator, arg);

            // Check if the variable name matches the target variable
            if (declarator.getNameAsString().equals(targetVariableName)) {
                // Get the variable type
                Type variableType = declarator.getType();

                // You can also get the initialization expression if present
                // Expression initialization = declarator.getInitializer().orElse(null);

                System.out.println("Variable Name: " + targetVariableName);
                System.out.println("Variable Type: " + variableType);
            }
        }
    }
}
